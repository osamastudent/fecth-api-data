in controller

use Illuminate\Support\Facades\Http;

    public function sales()
    {
        

        try {
            // Make a GET request to the external API
            $response = Http::get('https://test.hi5-consulting.com/api/all-jobs');

            // Check if the response is successful
            if ($response->successful()) {
                // Parse the response data
                $jobs = $response->json(); // Assuming the API returns JSON data
                return view('sales.index', ['jobs' => $jobs]); // Pass data to the view
            } else {
                // Handle error response
                return response()->json([
                    'error' => 'Failed to fetch jobs.',
                    'status' => $response->status()
                ], $response->status());
            }
        } catch (\Exception $e) {
            // Handle exceptions like timeout or connection error
            return response()->json([
                'error' => $e->getMessage()
            ], 500);
        }



        // $response = Http::get('https://test.hi5-consulting.com/api/all-jobs');
    
        // // Check if the response is successful
        // if ($response->successful()) {
        //     // Get the jobs data from the API response
        //     $jobs = $response->json();
    
        //     // Check if the 'data' key exists and contains the job list
        //     if (isset($jobs['data']) && is_array($jobs['data'])) {
        //         return view('sales.index', compact('jobs'));
        //     } else {
        //         // If the 'data' key is not found or is empty
        //         return view('sales.index', ['jobs' => []])->with('error', 'No jobs available at the moment.');
        //     }
        // } else {
        //     // Handle API request failure
        //     return view('sales.index', ['jobs' => []])->with('error', 'Unable to fetch jobs at the moment.');
        // }
    }


<!--     in blade file -->


        <!-- Check if there are any jobs -->
        @if(isset($jobs['data']) && count($jobs['data']) > 0)
            <table class="table">
                <thead>
                    <tr>
                        <th>Job Title</th>
                        <th>Industry</th>
                        <th>Employment Type</th>
                        <th>Location</th>
                        <th>Company</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach($jobs['data'] as $job)
                        <tr>
                            <td>{{ $job['job_title'] }}</td> <!-- Correct syntax here -->
                            <td>{{ $job['job_industry'] }}</td> <!-- Correct syntax here -->
                            <td>{{ $job['employment_type'] }}</td> <!-- Correct syntax here -->
                            <td>{{ $job['job_location'] }}</td> <!-- Correct syntax here -->
                            <td>{{ $job['company'] }}</td> <!-- Correct syntax here -->
                            <td>{{ $job['status'] }}</td> <!-- Correct syntax here -->
                        </tr>
                    @endforeach
                </tbody>
            </table>
        @else
            <p>No jobs available at the moment.</p>
        @endif

    



fetch latest record
public function adminCheckEmployeeReports()
{
    // Fetch unique attendance records grouped by user_id
    $attendancesAll = Attendance::with('user')
        ->select('user_id', \DB::raw('MAX(date) as latest_date')) // Example: Get the latest date for each user
        ->groupBy('user_id') // Group by user_id
        ->get();

    return view('contact.check-attendance-reports', compact('attendancesAll'));
}


***************************************************************next***********************************************************
fecth data with image in controll createing api 

public function blogs_api()
{
    $blogs = Blog::all();

    $baseURL = '/assets/images/blogs/'; // Use a relative path to the public folder
    foreach ($blogs as $blog) {
        // Attach the full image URL
        $blog->image_url = asset($baseURL . $blog->image); // 'asset()' generates the full URL for public files

        // Decode category IDs (assuming JSON format in DB)
        $categoryIds = json_decode($blog->category, true);

        // Fetch related categories
        $categories = Category::whereIn('id', $categoryIds)->get();

        // Attach category names
        $categoryNames = $categories->pluck('name')->toArray();
        $blog->category_names = $categoryNames;
    }

    return response()->json([
        'data' => $blogs,
        'status' => 200,
    ]);
}

  <tbody>
      @if(count($blogs) > 0)
        @foreach($blogs as $blog)
        <tr>
            <td>{{ $blog['id'] }}</td>
            <td>{{ implode(', ', json_decode($blog['category'])) }}</td> <!-- Display category IDs -->
            <td>{{ implode(', ', $blog['category_names']) }}</td> 
            <td><img src="{{ $blog['image_url'] }}" alt="Blog Image" width="100"></td> <!-- Display image -->
        </tr>
        @endforeach
    @else
        <tr>
            <td colspan="3">No blogs available at the moment.</td>
        </tr>
    @endif
</tbody>

fecth api data inc controller
  public function services()
    {
        try {
            // Fetch blogs from the external API
            $response = Http::get('https://hrm.thedatech.com/api/blogs');
    
            if ($response->successful()) {
                // Parse response into array
                $blogs = $response->json()['data'] ?? [];
    
                // Pass blogs to the view
                return view('website.service', compact('blogs'));
            }
    
            return response()->json([
                'error' => 'Failed to fetch blogs from the external API.',
                'status' => $response->status(),
            ], $response->status());
        } catch (\Exception $e) {
            // Handle exceptions
            return response()->json([
                'error' => 'An error occurred while fetching blogs.',
                'message' => $e->getMessage(),
            ], 500);
        }


    }


